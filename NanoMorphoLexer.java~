// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: morpho.jflex

/**
	Skeleton for NanoMorpho lexer
	Author: Snorri Agnarsson
 */

import java.io.*;


@SuppressWarnings("fallthrough")
public class NanoMorphoLexer implements NanoMorphoParser.Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u1b00\126\u0100\1\u2500\1\u0100\1\u2600"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\53\u0100\1\u2c00\10\u2d00"+
    "\31\u1f00\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000"+
    "\3\u0100\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00"+
    "\1\u5e00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\27\u1f00\1\u6200"+
    "\1\u6300\1\u6400\1\u6500\7\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\1\u1f00\1\u6a00\2\u1f00\1\u6b00\1\u6c00\1\u6d00\2\u1f00\1\u6e00"+
    "\1\u1f00\1\u6f00\21\u1f00\246\u0100\1\u7000\20\u0100\1\u7100\1\u7200"+
    "\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100\1\u7500\5\u1f00"+
    "\23\u0100\1\u7600\17\u0100\1\u7700\u0ddc\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\2\14"+
    "\1\11\1\15\1\14\1\15\1\16\1\11\4\17\4\20"+
    "\2\21\1\11\1\22\1\11\1\23\2\11\1\0\4\10"+
    "\1\24\25\10\1\0\1\25\1\0\1\11\1\10\1\0"+
    "\1\26\1\27\2\10\1\30\1\31\1\10\1\32\1\33"+
    "\2\10\1\34\1\10\1\35\3\10\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\3\10\1\14\1\44\1\14\1\11"+
    "\6\0\1\3\34\0\4\10\4\0\1\10\12\0\1\10"+
    "\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10"+
    "\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10"+
    "\201\0\5\10\1\0\2\10\2\0\4\10\1\0\1\10"+
    "\6\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10"+
    "\1\0\123\10\1\0\213\10\10\0\246\10\1\0\46\10"+
    "\2\0\1\10\6\0\51\10\6\0\1\10\100\0\33\10"+
    "\4\0\4\10\30\0\1\10\24\0\53\10\43\0\2\10"+
    "\1\0\143\10\1\0\1\10\17\0\2\10\7\0\2\10"+
    "\12\0\3\10\2\0\1\10\20\0\1\10\1\0\36\10"+
    "\35\0\131\10\13\0\1\10\30\0\41\10\11\0\2\10"+
    "\4\0\1\10\3\0\30\10\4\0\1\10\11\0\1\10"+
    "\3\0\1\10\27\0\31\10\7\0\13\10\5\0\30\10"+
    "\1\0\6\10\21\0\52\10\72\0\66\10\3\0\1\10"+
    "\22\0\1\10\7\0\12\10\17\0\20\10\4\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10"+
    "\3\0\4\10\3\0\1\10\20\0\1\10\15\0\2\10"+
    "\1\0\3\10\16\0\4\10\7\0\2\10\10\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\37\0\4\10\1\0\1\10"+
    "\23\0\3\10\20\0\11\10\1\0\3\10\1\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10"+
    "\22\0\1\10\17\0\2\10\17\0\1\10\7\0\1\10"+
    "\13\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\3\0\1\10\36\0\2\10"+
    "\1\0\3\10\17\0\1\10\21\0\1\10\1\0\6\10"+
    "\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10"+
    "\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10"+
    "\26\0\1\10\50\0\1\10\13\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\20\10\3\0\1\10\32\0\3\10"+
    "\2\0\1\10\2\0\2\10\36\0\1\10\4\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\3\0\1\10\37\0\2\10\1\0\2\10\17\0\2\10"+
    "\21\0\11\10\1\0\3\10\1\0\51\10\2\0\1\10"+
    "\20\0\1\10\5\0\3\10\10\0\3\10\30\0\6\10"+
    "\5\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10"+
    "\2\0\7\10\72\0\60\10\1\0\2\10\13\0\10\10"+
    "\72\0\2\10\1\0\1\10\1\0\5\10\1\0\30\10"+
    "\1\0\1\10\1\0\12\10\1\0\2\10\11\0\1\10"+
    "\2\0\5\10\1\0\1\10\25\0\4\10\40\0\1\10"+
    "\77\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10"+
    "\24\0\1\10\20\0\6\10\4\0\4\10\3\0\1\10"+
    "\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10"+
    "\21\0\46\10\1\0\1\10\5\0\1\10\2\0\53\10"+
    "\1\0\115\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10"+
    "\45\0\20\10\20\0\126\10\2\0\6\10\3\0\u016c\10"+
    "\2\0\21\10\1\0\32\10\5\0\113\10\3\0\13\10"+
    "\7\0\22\10\15\0\23\10\16\0\22\10\16\0\15\10"+
    "\1\0\3\10\17\0\64\10\43\0\1\10\3\0\2\10"+
    "\103\0\131\10\7\0\5\10\2\0\42\10\1\0\1\10"+
    "\5\0\106\10\12\0\37\10\61\0\36\10\2\0\5\10"+
    "\13\0\54\10\4\0\32\10\66\0\27\10\11\0\65\10"+
    "\122\0\1\10\135\0\57\10\21\0\10\10\66\0\36\10"+
    "\15\0\2\10\12\0\54\10\32\0\44\10\51\0\3\10"+
    "\12\0\44\10\2\0\11\10\7\0\53\10\2\0\3\10"+
    "\51\0\4\10\1\0\6\10\1\0\2\10\3\0\1\10"+
    "\5\0\300\10\100\0\26\10\2\0\6\10\2\0\46\10"+
    "\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\37\10\2\0\65\10\1\0\7\10"+
    "\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10"+
    "\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10"+
    "\53\0\2\3\25\0\2\10\23\0\1\10\34\0\1\10"+
    "\15\0\1\10\20\0\15\10\3\0\41\10\101\0\1\10"+
    "\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10"+
    "\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10"+
    "\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10"+
    "\21\0\51\10\u0177\0\345\10\6\0\4\10\3\0\2\10"+
    "\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\120\0\1\10\325\0\3\10"+
    "\31\0\11\10\7\0\5\10\2\0\5\10\4\0\126\10"+
    "\6\0\3\10\1\0\132\10\1\0\4\10\5\0\53\10"+
    "\1\0\136\10\21\0\40\10\60\0\235\10\103\0\56\10"+
    "\2\0\15\10\3\0\20\10\12\0\2\10\24\0\57\10"+
    "\20\0\37\10\2\0\120\10\47\0\11\10\2\0\147\10"+
    "\2\0\100\10\5\0\2\10\1\0\1\10\1\0\5\10"+
    "\30\0\20\10\1\0\3\10\1\0\4\10\1\0\27\10"+
    "\25\0\1\10\7\0\64\10\16\0\62\10\76\0\6\10"+
    "\3\0\1\10\1\0\2\10\13\0\34\10\12\0\27\10"+
    "\31\0\35\10\7\0\57\10\34\0\1\10\20\0\5\10"+
    "\1\0\12\10\12\0\5\10\1\0\51\10\27\0\3\10"+
    "\1\0\10\10\24\0\27\10\3\0\1\10\3\0\62\10"+
    "\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10"+
    "\1\0\1\10\30\0\3\10\2\0\13\10\7\0\3\10"+
    "\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10"+
    "\1\0\7\10\1\0\53\10\1\0\16\10\6\0\163\10"+
    "\35\0\244\10\14\0\27\10\4\0\61\10\4\0\u0100\45"+
    "\156\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0"+
    "\1\10\1\0\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0"+
    "\153\10\22\0\100\10\2\0\66\10\50\0\15\10\66\0"+
    "\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0"+
    "\207\10\7\0\1\10\34\0\32\10\4\0\1\10\1\0"+
    "\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0"+
    "\6\10\2\0\3\10\3\0\2\10\3\0\2\10\31\0"+
    "\14\10\1\0\32\10\1\0\23\10\1\0\2\10\1\0"+
    "\17\10\2\0\16\10\42\0\173\10\105\0\65\10\u010b\0"+
    "\35\10\3\0\61\10\57\0\40\10\15\0\36\10\5\0"+
    "\46\10\12\0\36\10\2\0\44\10\4\0\10\10\1\0"+
    "\5\10\52\0\236\10\22\0\44\10\4\0\44\10\4\0"+
    "\50\10\10\0\64\10\14\0\13\10\1\0\17\10\1\0"+
    "\7\10\1\0\2\10\1\0\13\10\1\0\17\10\1\0"+
    "\7\10\1\0\2\10\103\0\67\10\11\0\26\10\12\0"+
    "\10\10\30\0\6\10\1\0\52\10\1\0\11\10\105\0"+
    "\6\10\2\0\1\10\1\0\54\10\1\0\2\10\3\0"+
    "\1\10\2\0\27\10\12\0\27\10\11\0\37\10\101\0"+
    "\23\10\1\0\2\10\12\0\26\10\12\0\32\10\106\0"+
    "\70\10\6\0\2\10\100\0\1\10\17\0\4\10\1\0"+
    "\3\10\1\0\35\10\52\0\35\10\3\0\35\10\43\0"+
    "\10\10\1\0\34\10\33\0\66\10\12\0\26\10\12\0"+
    "\23\10\15\0\22\10\156\0\111\10\67\0\63\10\15\0"+
    "\63\10\15\0\44\10\u015c\0\52\10\6\0\2\10\116\0"+
    "\35\10\12\0\1\10\10\0\26\10\52\0\22\10\56\0"+
    "\25\10\33\0\27\10\14\0\65\10\71\0\2\10\2\0"+
    "\1\10\15\0\55\10\40\0\31\10\32\0\44\10\35\0"+
    "\1\10\2\0\1\10\10\0\43\10\3\0\1\10\14\0"+
    "\60\10\16\0\4\10\25\0\1\10\1\0\1\10\43\0"+
    "\22\10\1\0\31\10\23\0\2\10\77\0\7\10\1\0"+
    "\1\10\1\0\4\10\1\0\17\10\1\0\12\10\7\0"+
    "\57\10\46\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\3\0\1\10\22\0"+
    "\1\10\14\0\5\10\236\0\65\10\22\0\4\10\24\0"+
    "\3\10\36\0\60\10\24\0\2\10\1\0\1\10\270\0"+
    "\57\10\51\0\4\10\44\0\60\10\24\0\1\10\73\0"+
    "\53\10\15\0\1\10\107\0\33\10\45\0\7\10\271\0"+
    "\54\10\164\0\100\10\37\0\10\10\2\0\1\10\2\0"+
    "\10\10\1\0\2\10\1\0\30\10\17\0\1\10\1\0"+
    "\1\10\136\0\10\10\2\0\47\10\20\0\1\10\1\0"+
    "\1\10\34\0\1\10\12\0\50\10\7\0\1\10\25\0"+
    "\1\10\13\0\56\10\23\0\1\10\22\0\111\10\7\0"+
    "\11\10\1\0\45\10\21\0\1\10\61\0\36\10\160\0"+
    "\7\10\1\0\2\10\1\0\46\10\25\0\1\10\31\0"+
    "\6\10\1\0\2\10\1\0\40\10\16\0\1\10\u0147\0"+
    "\23\10\17\0\1\10\1\0\15\10\1\0\42\10\174\0"+
    "\1\10\54\0\4\10\37\0\232\10\146\0\157\10\21\0"+
    "\304\10\u014c\0\141\10\17\0\60\10\21\0\6\10\271\0"+
    "\107\10\271\0\71\10\7\0\37\10\21\0\117\10\21\0"+
    "\36\10\22\0\60\10\20\0\4\10\37\0\25\10\5\0"+
    "\23\10\260\0\100\10\200\0\113\10\5\0\1\10\102\0"+
    "\15\10\100\0\2\10\1\0\1\10\34\0\370\10\10\0"+
    "\326\10\52\0\11\10\u01e7\0\4\10\1\0\7\10\1\0"+
    "\2\10\1\0\43\10\17\0\1\10\35\0\3\10\2\0"+
    "\1\10\16\0\4\10\10\0\u018c\10\4\0\153\10\5\0"+
    "\15\10\3\0\11\10\7\0\12\10\146\0\125\10\1\0"+
    "\107\10\1\0\2\10\2\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\0\14\10\1\0\1\10\1\0\7\10\1\0"+
    "\101\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0"+
    "\34\10\1\0\4\10\1\0\5\10\1\0\1\10\3\0"+
    "\7\10\1\0\u0154\10\2\0\31\10\1\0\31\10\1\0"+
    "\37\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0"+
    "\37\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0"+
    "\10\10\64\0\37\10\6\0\6\10\u0105\0\76\10\222\0"+
    "\55\10\12\0\7\10\20\0\1\10\u0141\0\36\10\22\0"+
    "\54\10\23\0\1\10\320\0\34\10\364\0\7\10\1\0"+
    "\4\10\1\0\2\10\1\0\17\10\1\0\305\10\73\0"+
    "\104\10\7\0\1\10\u0164\0\1\10\117\0\4\10\1\0"+
    "\33\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0"+
    "\12\10\1\0\4\10\1\0\1\10\1\0\1\10\6\0"+
    "\1\10\4\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\1\10\2\0\4\10\1\0\7\10\1\0"+
    "\4\10\1\0\4\10\1\0\1\10\1\0\12\10\1\0"+
    "\21\10\5\0\3\10\1\0\5\10\1\0\21\10\104\0"+
    "\340\10\40\0\72\10\6\0\336\10\2\0\u0182\10\16\0"+
    "\u0131\10\37\0\36\10\342\0\113\10\5\0\u0160\10\120\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30720];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\1"+
    "\1\6\1\7\2\6\10\4\1\5\1\0\1\7\1\0"+
    "\1\10\4\0\2\4\1\11\5\4\1\12\2\0\1\7"+
    "\1\0\5\4\1\13\1\4\1\0\2\14\1\15\1\7"+
    "\2\4\1\0\1\7\1\16\1\4\1\17\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\46\0\114\0\162\0\230\0\114\0\276"+
    "\0\344\0\46\0\u010a\0\u0130\0\114\0\u0156\0\u017c\0\u01a2"+
    "\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\162\0\46"+
    "\0\u02ac\0\114\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390"+
    "\0\230\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\114\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\230\0\u05ca\0\u05f0\0\46\0\u0616\0\230\0\230\0\u063c"+
    "\0\u0662\0\u0688\0\u0688\0\46\0\u06ae\0\230\0\230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\7\1\2\3\13\1\14\1\15"+
    "\1\6\1\2\2\6\1\16\1\17\1\6\1\20\1\6"+
    "\1\21\1\22\1\6\1\23\1\6\1\24\1\25\1\26"+
    "\55\0\1\7\2\0\2\7\2\0\1\7\5\0\1\7"+
    "\20\0\1\7\1\0\7\27\1\30\15\27\1\31\20\27"+
    "\10\0\1\6\6\0\3\6\2\0\1\6\1\0\16\6"+
    "\10\0\1\7\2\0\1\7\1\32\2\0\1\7\5\0"+
    "\1\7\20\0\1\7\1\0\13\33\1\0\11\33\1\34"+
    "\20\33\16\0\1\35\3\13\46\0\1\36\33\0\1\6"+
    "\6\0\3\6\2\0\1\6\1\0\6\6\1\37\7\6"+
    "\12\0\1\6\6\0\3\6\2\0\1\6\1\0\1\40"+
    "\15\6\12\0\1\6\6\0\3\6\2\0\1\6\1\0"+
    "\3\6\1\41\12\6\12\0\1\6\6\0\3\6\2\0"+
    "\1\6\1\0\13\6\1\42\2\6\12\0\1\6\6\0"+
    "\3\6\2\0\1\6\1\0\2\6\1\43\13\6\12\0"+
    "\1\6\6\0\3\6\2\0\1\6\1\0\10\6\1\44"+
    "\5\6\12\0\1\6\6\0\3\6\2\0\1\6\1\0"+
    "\1\45\15\6\12\0\1\6\6\0\3\6\2\0\1\6"+
    "\1\0\4\6\1\46\11\6\10\0\1\7\2\0\2\7"+
    "\2\0\1\7\5\0\1\7\20\0\1\47\10\0\1\27"+
    "\3\0\1\27\3\0\2\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\3\0\2\27\1\0\1\27\20\0\1\30"+
    "\41\0\1\33\3\0\1\33\3\0\1\50\1\51\4\0"+
    "\1\33\1\0\1\33\1\0\1\33\3\0\2\33\1\0"+
    "\1\33\24\0\3\52\46\0\1\53\33\0\1\6\6\0"+
    "\3\6\2\0\1\6\1\0\11\6\1\54\4\6\12\0"+
    "\1\6\6\0\3\6\2\0\1\6\1\0\6\6\1\55"+
    "\7\6\12\0\1\6\6\0\3\6\2\0\1\6\1\0"+
    "\6\6\1\56\7\6\12\0\1\6\6\0\3\6\2\0"+
    "\1\6\1\0\12\6\1\57\3\6\12\0\1\6\6\0"+
    "\3\6\2\0\1\6\1\0\13\6\1\60\2\6\12\0"+
    "\1\6\6\0\3\6\2\0\1\6\1\0\10\6\1\61"+
    "\5\6\12\0\1\6\6\0\3\6\2\0\1\6\1\0"+
    "\5\6\1\62\10\6\15\0\1\30\3\0\2\51\40\0"+
    "\1\30\3\0\2\33\44\0\3\52\2\0\1\63\3\0"+
    "\1\63\15\0\2\53\3\64\1\65\37\53\11\0\1\6"+
    "\6\0\3\6\2\0\1\6\1\0\2\6\1\66\13\6"+
    "\12\0\1\6\6\0\3\6\2\0\1\6\1\0\11\6"+
    "\1\60\4\6\12\0\1\6\6\0\3\6\2\0\1\6"+
    "\1\0\6\6\1\67\7\6\12\0\1\6\6\0\3\6"+
    "\2\0\1\6\1\0\13\6\1\70\2\6\12\0\1\6"+
    "\6\0\3\6\2\0\1\6\1\0\2\6\1\67\13\6"+
    "\12\0\1\6\6\0\3\6\2\0\1\6\1\0\6\6"+
    "\1\71\7\6\17\0\1\72\1\0\3\73\26\0\1\74"+
    "\53\0\1\6\6\0\3\6\2\0\1\6\1\0\10\6"+
    "\1\75\5\6\12\0\1\6\6\0\3\6\2\0\1\6"+
    "\1\0\2\6\1\76\13\6\21\0\3\73\34\0\1\6"+
    "\6\0\3\6\2\0\1\6\1\0\7\6\1\77\6\6"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1748];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\14\1\1\0\1\11\1\0"+
    "\1\1\4\0\11\1\2\0\1\1\1\0\7\1\1\0"+
    "\1\11\5\1\1\0\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

public String getLVal() { return yytext(); }
public void yyerror( String error )
{
	System.err.println("Error:  "+error);
	System.err.println("Lexeme: "+yytext());
	System.err.println("Line:   "+(yyline+1));
	System.err.println("Column: "+(yycolumn+1));
	System.exit(1);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NanoMorphoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return -1;
            }
          // fall through
          case 17: break;
          case 2:
            { 
            }
          // fall through
          case 18: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 19: break;
          case 4:
            { return Parser.NAME;
            }
          // fall through
          case 20: break;
          case 5:
            { switch( yycharat(0) )
    {
    case '?':
    case '~':
    case '^':
        return OP1;
    case ':':
        return OP2;
    case '|':
        return OP3;
    case '&':
        return OP4;
    case '<':
    case '>':
    case '=':
    case '!':
        return OP5;
    case '+':
    case '-':
        return OP6;
    case '*':
    case '/':
    case '%':
        return OP7;
    }
    throw new Error("This can't happen");
            }
          // fall through
          case 21: break;
          case 6:
            { return yycharat(0);
            }
          // fall through
          case 22: break;
          case 7:
            { return LITERAL;
            }
          // fall through
          case 23: break;
          case 8:
            { return AND;
            }
          // fall through
          case 24: break;
          case 9:
            { return IF;
            }
          // fall through
          case 25: break;
          case 10:
            { return OR;
            }
          // fall through
          case 26: break;
          case 11:
            { return VAR;
            }
          // fall through
          case 27: break;
          case 12:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { 
            }
          // fall through
          case 28: break;
          case 13:
            { return ELSE;
            }
          // fall through
          case 29: break;
          case 14:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { 
            }
          // fall through
          case 30: break;
          case 15:
            { return WHILE;
            }
          // fall through
          case 31: break;
          case 16:
            { return RETURN;
            }
          // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
